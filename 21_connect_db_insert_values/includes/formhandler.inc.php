<?php

// ########### 1

// потрібно впевитися, що користувач використав форму і відправив дані
// а не перейшов на сторінку просто вписавши її назву в адрес строку
// Тому перевіряємо чи "REQUEST_METHOD" == "POST", якщо ні 
// в блоці else розвертаємо юзера

if($_SERVER["REQUEST_METHOD"] == "POST") {
    // ########### 2 - відхоплюємо дані з форми

    // ми не використали тут фільтрацію данних такі як htmlspecialcharacters() 
    // або filter_input... оскільки, дані які ми відхоплюємо 
    // не будуть відображатися в браузері як в прикладі з калькулятором 
    $username = $_POST["username"];
    $pwd = $_POST["pwd"];
    $email = $_POST["email"];

    try {
        // даний запис озн. те саме, що вставити тут увесь код з файлу за посиланням
        // тепер ми маємо повний доступ до коду у файлі
       require_once "dbh.inc.php";
        // include - включає файл і виконує його код, при відсутності попередження WANING
        // require - аналогічно проте при відсутності файлу фатальна помилка ERROR
        // include_once, як і require_once - аналогічно діє, але додатково PHP перевірить 
        // чи цей файл вже був включений, якщо так, не буде це робити повторно

        // ########### 3 - ств. код для додавання данних в DB, дваома методами
        // 3.1 - NON NAMED, 3.2 - NAMED method

        //                                  ######### 3.1 start NON NAMED method 
       
        // по суті це код SQL, синтаксис важливий, як ";" в кінці як SQL коду так і PHP
        // введенна данних через метод NON NAMED з ?, ?, ?
        // працює як заглушка, до того як ми підготуємо дані через statement
        $query = "INSERT INTO users (username, pwd, email)
        VALUES (?, ?, ?);";

        // готуємо дані для NON NAMED методу
        $stmt = $pdo->prepare($query);
        // передаємо cамі дані через statement методом execute
        // порядок данних важливий (як в SQL)
        $stmt->execute([$username, $pwd, $email]);
        // передача данних NON NAMED методом до DB завершено.        
        //                                  ######### end NON NAMED method

        //                                  ######### 3.2 start NAMED method 
        // різниця в визначенні параментрів, тому створюємо назви змінних через ":" як "":username, :pwd, :email"
        // $query = "INSERT INTO users (username, pwd, email)
        // VALUES (:username, :pwd, :email);";

        // $stmt = $pdo->prepare($query);

        // // визначає наші параметри вказуючи якій змінній назва відповідає 
        // $stmt->bindParam(":username", $username);
        // $stmt->bindParam(":pwd", $pwd);
        // $stmt->bindParam(":email", $email);

        // // відправляємо дані
        // $stmt->execute();
        //                                  ######### end NAMED method 


        // ########### 4 - вручну зупиняємо і кажемо, що завершено виконання коду
        // таким чином це best practice щодо вивільнення ресурсів як умога швидше        
        $pdo = null; // тобто кажемо нашій DB все закінчено ресурси звільнити
        $stmt = null; // аналогічно зі statement який готував і відпрвляв дані

        // ########### 5 - розвертапємо юзера на головну сторінку
        header("Location: ../index.php");

        // ########### 6 - завершення 
        // останнє це die() але без аргументів
        die();
        // аналог exit() - використовується коли відсутня логіка підключення до чогось
        // тому в нас і die() оск є підключення до DB
    } catch (PDOExeption $e) {
        // відхоплення помилок, die() - зупинить весь код і виведе повідомлення помилки
        //через $e->getMessage() - повідомлення помилки, також можна вписати своє повідомлення "Query failed"
        die("Query failed: " . $e->getMessage());
    }

} else {
    // при спробі попасти в цей файл без відправки даних через форму
    // розвертаємо юзера на головну сторінку
    header("Location: ../index.php");
};